{% extends 'partials/main.html.twig' %}

{% block stylesheets %}

{{ parent() }}

<!-- jsvectormap css -->
<link href="{{ asset('libs/jsvectormap/css/jsvectormap.min.css') }}" rel="stylesheet" type="text/css" />

<!--Swiper slider css-->
<link href="{{ asset('libs/swiper/swiper-bundle.min.css') }}" rel="stylesheet" type="text/css" />

{% endblock %}

{% block content %}

<div class="modal fade" id="segmentoModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false"
    tabindex="-1" aria-labelledby="segmentoModalLabel">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="segmentoModalLabel">Vuelos disponibles</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Origen</th>
                                <th>Destino</th>
                                <th>Número de Vuelo</th>
                                <th>Frecuencia</th>
                                <th>Hora de Salida</th>
                                <th>Hora de Llegada</th>
                                <th>Tipo de Aeronave</th>
                                <th>Vigente Desde</th>
                                <th>Vigente Hasta</th>
                            </tr>
                        </thead>
                        <tbody id="flightsTableBody">
                            <!-- Aquí se agregarán las filas dinámicamente -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="botonAgregarSegmento">Agregar segmento</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">

    <div class="row">
        <div class="p-2 col-xl-12 col-lg-12">
            <div class="card card-height-100">
                <div class="card-header align-items-center d-flex">
                    <h4 class="card-title mb-0 flex-grow-1 text-uppercase">
                        {{ title }}
                    </h4>
                </div>
                <div class="card-body">
                    <div class="container-fluid">
                        {{ form_start(form) }}
                        <div class="row">
                            <div class="p-2 col-6">
                                {{ form_label (form.originOffice) }}
                                {{ form_widget (form.originOffice) }}
                                {{ form_errors (form.originOffice)}}
                            </div>
                            <div class="p-2 col-6">
                                {{ form_label (form.destinationOffice) }}
                                {{ form_widget (form.destinationOffice) }}
                                {{ form_errors (form.destinationOffice)}}
                            </div>
                        </div>
                        <div class="row">
                            <div class="p-2 col-12">
                                {{ form_label (form.routeServiceRanges) }}
                                {{ form_widget (form.routeServiceRanges) }}
                                {{ form_errors (form.routeServiceRanges)}}
                            </div>
                        </div>

                        <hr>
                        <div class="row">
                            <div class="col-12">
                                <h3>Segmentos</h3>
                            </div>
                            <div class="p-2 col-6">
                                {{ form_label (form.originAirport) }}
                                {{ form_widget (form.originAirport) }}
                                {{ form_errors (form.originAirport)}}
                            </div>
                            <div class="p-2 col-6">
                                {{ form_label (form.arrivalAirport) }}
                                {{ form_widget (form.arrivalAirport) }}
                                {{ form_errors (form.arrivalAirport)}}
                            </div>
                            <div class="p-2 col-12 text-center">
                                <p class="text-danger" id="errorAirportsSelected"></p>
                            </div>
                            <div class="p-2 col-12 text-end">
                                <button type="button" id="segmentoModalButton" class="btn btn-primary">
                                    Buscar vuelos
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="p-2 col-12">
                                <h4>Segmentos seleccionados</h4>
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Orden</th>
                                                <th>Origen</th>
                                                <th>Destino</th>
                                                <th>Número de Vuelo</th>
                                                <th>Frecuencia</th>
                                                <th>Hora de Salida</th>
                                                <th>Hora de Llegada</th>
                                                <th>Tipo de Aeronave</th>
                                                <th>Vigente Desde</th>
                                                <th>Vigente Hasta</th>
                                                <th>Acción</th>
                                            </tr>
                                        </thead>
                                        <tbody id="segmentsTableBody">
                                            <!-- Aquí se agregarán las filas dinámicamente -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            {{ form_errors(form) }}
                            <div class="p-2 col-12 text-end">
                                <a href="{{ path('app_secure_routes') }}" class="btn btn-light m-2">Cancelar</a>
                                <button class="btn btn-primary m-2" type="submit">Guardar ruta</button>
                            </div>
                        </div>
                        {{ form_end(form) }}
                    </div><!-- end card body -->
                </div><!-- end card -->
            </div><!-- end col -->
        </div><!-- end row -->




    </div>

    {% endblock %}

    {% block javascripts %}

    {{ parent() }}

    <!-- apexcharts -->
    <script src="{{ asset('libs/apexcharts/apexcharts.min.js') }}"></script>

    <!-- Dashboard init -->
    <script src="{{ asset('js/pages/dashboard-crm.init.js') }}"></script>

    <script>
        $(document).ready(function () {
            let fetchedFlights = []; // Variable global para almacenar los vuelos disponibles
            let selectedSegments = []; // Array para almacenar los vuelos seleccionados

            const segmentsInput = $('#routes_segments').val();

            if (segmentsInput) {
                try {
                    selectedSegments = JSON.parse(segmentsInput); // Parsear los datos del input hidden
                    selectedSegments.forEach((segment, index) => {
                        // Agregar cada segmento a la tabla
                        const segmentRow = `
                    <tr data-id="${segment.id}">
                        <td class="text-center">${index + 1}</td>
                        <td>${segment.originAirport}</td>
                        <td>${segment.arrivalAirport}</td>
                        <td>${segment.flightNumber}</td>
                        <td>${segment.flightFrequency}</td>
                        <td>${new Date(segment.departureTime).toTimeString().slice(0, 5)}</td>
                        <td>${new Date(segment.arrivalTime).toTimeString().slice(0, 5)} ${new Date(segment.arrivalTime) < new Date(segment.departureTime) ? "(+1 día)" : ""}</td>
                        <td>${segment.aircraftType}</td>
                        <td>${new Date(segment.effectiveDate).toLocaleDateString()}</td>
                        <td>${new Date(segment.discontinueDate).toLocaleDateString()}</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-segment" data-id="${segment.id}">Eliminar</button>
                        </td>
                    </tr>
                `;
                        $('#segmentsTableBody').append(segmentRow);
                    });
                } catch (error) {
                    console.error('Error al parsear los segmentos:', error);
                }
            }


            $(document).on('click', '.selectable-row', function (e) {
                // Evitar que se dispare si se hace clic directamente en el input radio
                if (!$(e.target).is('input[type="radio"]')) {
                    // Encontrar el input radio dentro de la fila y seleccionarlo
                    $(this).find('input[type="radio"]').prop('checked', true);
                }
            });

            // Buscar vuelos al hacer clic en el botón "Buscar vuelos"
            $('#segmentoModalButton').on('click', function () {
                // Validar los aeropuertos seleccionados
                let airportOriginCode = $('#routes_originAirport option:selected').text().trim().substring(0, 3);
                let airportArrivalCode = $('#routes_arrivalAirport option:selected').text().trim().substring(0, 3);

                if ($('#routes_originAirport option:selected').val() === '' || $('#routes_arrivalAirport option:selected').val() === '') {
                    $('#errorAirportsSelected').html('Debe seleccionar aeropuerto de origen y aeropuerto destino');
                    return;
                }

                $('#errorAirportsSelected').html('');

                // Realizar la solicitud para obtener los vuelos
                fetch('/secure/flights/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        originAirport: airportOriginCode,
                        arrivalAirport: airportArrivalCode,
                        idFlightsSelected: selectedSegments[selectedSegments.length - 1] ? selectedSegments.map(flight => flight.id) : null
                    }),
                })
                    .then(response => response.json())
                    .then(data => {
                        fetchedFlights = data; // Guardar los vuelos en la variable global

                        // Limpiar la tabla antes de agregar nuevos datos
                        const flightsTableBody = $('#flightsTableBody');
                        flightsTableBody.empty();

                        if (data.length === 0) {
                            $('#errorAirportsSelected').html('No se encontraron vuelos para los criterios seleccionados');
                            flightsTableBody.append('<tr><td colspan="10" class="text-center">No se encontraron vuelos disponibles</td></tr>');
                            return;
                        }

                        $('#errorAirportsSelected').html('');

                        // Generar las filas de la tabla
                        data.forEach(flight => {
                            const row = `
                            <tr class="selectable-row" data-id="${flight.id}" style="pointer:hand">
                                <td>
                                    <input type="radio" name="selectedFlight" value="${flight.id}">
                                </td>
                                <td>${flight.originAirport}</td>
                                <td>${flight.arrivalAirport}</td>
                                <td>${flight.flightNumber}</td>
                                <td>${flight.flightFrequency}</td>
                                <td>${new Date(flight.departureTime).toTimeString().slice(0, 5)}</td>
                                <td>${new Date(flight.arrivalTime).toTimeString().slice(0, 5)} ${new Date(flight.arrivalTime) < new Date(flight.departureTime) ? "(+1 día)" : ""}</td>
                                <td>${flight.aircraftType}</td>
                                <td>${new Date(flight.effectiveDate).toLocaleDateString()}</td>
                                <td>${new Date(flight.discontinueDate).toLocaleDateString()}</td>
                            </tr>
                        `;
                            flightsTableBody.append(row);
                        });

                        // Mostrar el modal
                        $('#segmentoModal').modal('show');
                    })
                    .catch(error => {
                        console.error('Error al buscar vuelos:', error);
                    });
            });

            // Agregar segmento al hacer clic en "Agregar segmento"
            $('#botonAgregarSegmento').on('click', function () {
                // Validar si hay un vuelo seleccionado
                const selectedFlight = $('input[name="selectedFlight"]:checked');
                if (selectedFlight.length === 0) {
                    alert('Por favor, selecciona un vuelo.');
                    return;
                }

                // Obtener ID del vuelo seleccionado
                const flightId = selectedFlight.val();

                // Agregar vuelo seleccionado al listado de segmentos
                addSegmentToList(flightId);

                // Cerrar el modal
                $('#segmentoModal').modal('hide');
            });

            // Función para agregar un segmento a la lista
            function addSegmentToList(flightId) {
                // Buscar el vuelo seleccionado en el JSON
                const flight = fetchedFlights.find(flight => flight.id === parseInt(flightId));
                if (!flight) return;

                // Verificar si el vuelo ya está en la lista
                if (selectedSegments.some(segment => segment.id === flight.id)) {
                    alert('Este vuelo ya está en la lista de segmentos.');
                    return;
                }

                // Agregar vuelo al array de segmentos seleccionados
                selectedSegments.push(flight);

                // Renderizar el vuelo en la tabla
                const segmentRow = `
                    <tr data-id="${flight.id}">
                        <td class="text-center">${selectedSegments.length}</td>
                        <td>${flight.originAirport}</td>
                        <td>${flight.arrivalAirport}</td>
                        <td>${flight.flightNumber}</td>
                        <td>${flight.flightFrequency}</td>
                        <td>${new Date(flight.departureTime).toTimeString().slice(0, 5)}</td>
                        <td>${new Date(flight.arrivalTime).toTimeString().slice(0, 5)} ${new Date(flight.arrivalTime) < new Date(flight.departureTime) ? "(+1 día)" : ""}</td>
                        <td>${flight.aircraftType}</td>
                        <td>${new Date(flight.effectiveDate).toLocaleDateString()}</td>
                        <td>${new Date(flight.discontinueDate).toLocaleDateString()}</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-segment" data-id="${flight.id}">Eliminar</button>
                        </td>
                    </tr>
                `;
                $('#segmentsTableBody').append(segmentRow);

                // Actualizar el input hidden
                updateSegmentsInput();
            }

            // Función para eliminar un segmento de la lista
            function removeSegment(flightId) {
                // Filtrar el segmento fuera del array
                selectedSegments = selectedSegments.filter(segment => segment.id !== flightId);

                // Eliminar la fila de la tabla visualmente
                $(`#segmentsTableBody tr[data-id="${flightId}"]`).remove();

                // Renumerar las filas restantes
                $('#segmentsTableBody tr').each(function (index) {
                    $(this).find('td:first').text(index + 1);
                });

                // Actualizar el input hidden
                updateSegmentsInput();
            }

            // Manejar el clic en el botón de eliminar (delegado para elementos dinámicos)
            $(document).on('click', '.remove-segment', function () {
                const flightId = $(this).data('id');
                removeSegment(flightId);
            });

            function updateSegmentsInput() {
                // Asignar el array formateado al input hidden
                if (selectedSegments.length) {
                    $('#routes_segments').val(JSON.stringify(selectedSegments));
                } else {
                    $('#routes_segments').val(null);
                }
            }
        });


    </script>

    {% endblock %}